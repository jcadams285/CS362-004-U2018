
Random Card Test: Testing the Village card
----------------------------------------------
Test 1: PASSED-- Correct number of handCount found in each of the tests
Test 2: PASSED-- Correct number of played cards
Test 3: PASSED-- Correct number of cards in deck pile
Test 4: FAILED-- Incorrect number of action points

File 'dominion.c'
Lines executed:21.97% of 569
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
134998050:    8:int compare(const void* a, const void* b) {
134998050:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
134998050:   11:  if (*(int*)a < *(int*)b)
 35999480:   12:    return -1;
 98998570:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
  3000001:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
  3000001:   44:  SelectStream(1);
  3000001:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
  3000001:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
  3000001:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
 33000011:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
330000110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
300000100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
  3000001:   73:  if (numPlayers == 2)
        -:   74:    {
  1000129:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
  1999872:   77:  else if (numPlayers == 3)
        -:   78:    {
   999876:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
   999996:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
  3000001:   87:  if (numPlayers == 2)
        -:   88:    {
  1000129:   89:      state->supplyCount[estate] = 8;
  1000129:   90:      state->supplyCount[duchy] = 8;
  1000129:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
  1999872:   95:      state->supplyCount[estate] = 12;
  1999872:   96:      state->supplyCount[duchy] = 12;
  1999872:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
  3000001:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  3000001:  102:  state->supplyCount[silver] = 40;
  3000001:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
 63000021:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
495000165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
465000155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
 30000010:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
  6000002:  115:		  if (numPlayers == 2){ 
  1000129:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
  1999872:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
 27000009:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
 30000010:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
435000145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
 11999871:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
  8999870:  140:      state->deckCount[i] = 0;
 35999480:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
 26999610:  143:	  state->deck[i][j] = estate;
 26999610:  144:	  state->deckCount[i]++;
        -:  145:	}
 71998960:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
 62999090:  148:	  state->deck[i][j] = copper;
 62999090:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
 11999871:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
  8999870:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
 11999871:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
  8999870:  166:      state->handCount[i] = 0;
  8999870:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
 84000028:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
 81000027:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
  3000001:  182:  state->outpostPlayed = 0;
  3000001:  183:  state->phase = 0;
  3000001:  184:  state->numActions = 1;
  3000001:  185:  state->numBuys = 1;
  3000001:  186:  state->playedCardCount = 0;
  3000001:  187:  state->whoseTurn = 0;
  3000001:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
 18000006:  192:  for (it = 0; it < 5; it++){
 15000005:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
  3000001:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
  3000001:  198:  return 0;
        -:  199:}
        -:  200:
  8999870:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  8999870:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  8999870:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
  8999870:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
107998440:  214:  while (state->deckCount[player] > 0) {
 89998700:  215:    card = floor(Random() * state->deckCount[player]);
 89998700:  216:    newDeck[newDeckPos] = state->deck[player][card];
 89998700:  217:    newDeckPos++;
299835732:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
209837032:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
 89998700:  221:    state->deckCount[player]--;
        -:  222:  }
 98998570:  223:  for (i = 0; i < newDeckPos; i++) {
 89998700:  224:    state->deck[player][i] = newDeck[i];
 89998700:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
  8999870:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
  6000002:  346:int whoseTurn(struct gameState *state) {
  6000002:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
 18000006:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 18000006:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
 18000006:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 18000006:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 18000006:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 18000006:  576:    state->deckCount[player]--;
 18000006:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 18000006:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:void playAdventure(struct gameState *state){
    #####:  647:    int currentPlayer = whoseTurn(state);
        -:  648:    int temphand[MAX_HAND];// moved above the if statement
    #####:  649:    int drawntreasure=0;
        -:  650:    int cardDrawn;
    #####:  651:    int z = 0;// this is the counter for the temp hand
        -:  652:
    #####:  653:    while(drawntreasure<2){
    #####:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:      shuffle(currentPlayer, state);
        -:  656:    }
    #####:  657:    drawCard(currentPlayer, state);
    #####:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:    if (cardDrawn == silver || cardDrawn == gold)
    #####:  660:      drawntreasure++;
        -:  661:    else{
    #####:  662:      temphand[z]=cardDrawn;
    #####:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:      z++;
        -:  665:    }
        -:  666:        }
    #####:  667:        while(z-1>=0){
    #####:  668:          state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:          z=z-1;
        -:  670:        }
    #####:  671:}
        -:  672:
    #####:  673:void playSmithy(struct gameState *state, int handPos){
        -:  674:      int i;
    #####:  675:      int currentPlayer = whoseTurn(state);
        -:  676:
        -:  677:      //+3 Cards
    #####:  678:      for (i = 0; i < 4; i++)
        -:  679:      {
    #####:  680:        drawCard(currentPlayer, state);
        -:  681:      }
        -:  682:      
        -:  683:      //discard card from hand
    #####:  684:      discardCard(handPos, currentPlayer, state, 0);
    #####:  685:}
        -:  686:
  3000001:  687:void playVillage(struct gameState *state, int handPos){
  3000001:  688:      int currentPlayer = whoseTurn(state);
        -:  689:      //+1 Card
  3000001:  690:      drawCard(currentPlayer, state);
        -:  691:      
        -:  692:      //+2 Actions
  3000001:  693:      state->numActions = state->numActions + 1;
        -:  694:      
        -:  695:      //discard played card from hand
  3000001:  696:      discardCard(handPos, currentPlayer, state, 0);
  3000001:  697:}
        -:  698:
        -:  699:
    #####:  700:void playCouncilRoom(struct gameState *state, int handPos){
        -:  701:      int i;
        -:  702:
    #####:  703:      int currentPlayer = whoseTurn(state);
        -:  704:
        -:  705:          //+4 Cards
    #####:  706:      for (i = 0; i < 4; i++)
        -:  707:      {
    #####:  708:        drawCard(currentPlayer, state);
        -:  709:      }
        -:  710:      
        -:  711:      //+1 Buy
    #####:  712:      state->numBuys--;
        -:  713:      
        -:  714:      //Each other player draws a card
    #####:  715:      for (i = 0; i < state->numPlayers; i++)
        -:  716:      {
    #####:  717:        if ( i != currentPlayer )
        -:  718:          {
    #####:  719:            drawCard(i, state);
        -:  720:          }
        -:  721:      }
        -:  722:      
        -:  723:      //put played card in played card pile
    #####:  724:      discardCard(handPos, currentPlayer, state, 0);
    #####:  725:}
        -:  726:
    #####:  727:int playMine(int choice1, int choice2, struct gameState *state, int handPos){
        -:  728:      int i;
        -:  729:      int j;
    #####:  730:      int currentPlayer = whoseTurn(state);
        -:  731:
    #####:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
    #####:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  735:      {
    #####:  736:        return -1;
        -:  737:      }
        -:  738:    
    #####:  739:      if (choice2 > treasure_map || choice2 < curse)
        -:  740:      {
    #####:  741:        return -1;
        -:  742:      }
        -:  743:
    #####:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  745:      {
    #####:  746:        return -1;
        -:  747:      }
        -:  748:
    #####:  749:      gainCard(choice2, state, 2, currentPlayer);
        -:  750:
        -:  751:      //discard card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        -:  754:      //discard trashed card
    #####:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  756:      {
    #####:  757:        if (state->hand[currentPlayer][i] == j)
        -:  758:          {
    #####:  759:            discardCard(i, currentPlayer, state, 0);      
    #####:  760:            break;
        -:  761:          }
        -:  762:      }
        -:  763:
    #####:  764:      return 0;
        -:  765:}
        -:  766:
        -:  767:
  3000001:  768:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  769:{
        -:  770:  int i;
        -:  771:  int j;
        -:  772:  int k;
        -:  773:  int x;
        -:  774:  int index;
  3000001:  775:  int currentPlayer = whoseTurn(state);
  3000001:  776:  int nextPlayer = currentPlayer + 1;
        -:  777:
  3000001:  778:  int tributeRevealedCards[2] = {-1, -1};
        -:  779:  int temphand[MAX_HAND];// moved above the if statement
        -:  780:
  3000001:  781:  if (nextPlayer > (state->numPlayers - 1)){
  1084305:  782:    nextPlayer = 0;
        -:  783:  }
        -:  784:
        -:  785:  //uses switch to select card and perform actions
  3000001:  786:  switch( card ) 
        -:  787:    {
        -:  788:    case adventurer:
    #####:  789:      playAdventure(state);
    #####:  790:      return 0;
        -:  791:			
        -:  792:    case council_room:
    #####:  793:      playCouncilRoom(state, handPos);
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case feast:
        -:  797:      //gain card with cost up to 5
        -:  798:      //Backup hand
    #####:  799:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:      }
        -:  803:      //Backup hand
        -:  804:
        -:  805:      //Update Coins for Buy
    #####:  806:      updateCoins(currentPlayer, state, 5);
    #####:  807:      x = 1;//Condition to loop on
    #####:  808:      while( x == 1) {//Buy one card
    #####:  809:	if (supplyCount(choice1, state) <= 0){
        -:  810:	  if (DEBUG)
        -:  811:	    printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:	  if (DEBUG){
        -:  814:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:	  }
        -:  816:	}
    #####:  817:	else if (state->coins < getCost(choice1)){
    #####:  818:	  printf("That card is too expensive!\n");
        -:  819:
        -:  820:	  if (DEBUG){
        -:  821:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:	  }
        -:  823:	}
        -:  824:	else{
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:	  }
        -:  829:
    #####:  830:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:	  x = 0;//No more buying cards
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:	  }
        -:  836:
        -:  837:	}
        -:  838:      }     
        -:  839:
        -:  840:      //Reset Hand
    #####:  841:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:	state->hand[currentPlayer][i] = temphand[i];
    #####:  843:	temphand[i] = -1;
        -:  844:      }
        -:  845:      //Reset Hand
        -:  846:      			
    #####:  847:      return 0;
        -:  848:			
        -:  849:    case gardens:
    #####:  850:      return -1;
        -:  851:			
        -:  852:    case mine:
    #####:  853:			if(playMine(choice1, choice2, state, handPos) < 0){
    #####:  854:        return -1;
        -:  855:      }
    #####:  856:      return 0;
        -:  857:			
        -:  858:    case remodel:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      gainCard(choice2, state, 0, currentPlayer);
        -:  867:
        -:  868:      //discard card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
        -:  870:
        -:  871:      //discard trashed card
    #####:  872:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  873:	{
    #####:  874:	  if (state->hand[currentPlayer][i] == j)
        -:  875:	    {
    #####:  876:	      discardCard(i, currentPlayer, state, 0);			
    #####:  877:	      break;
        -:  878:	    }
        -:  879:	}
        -:  880:
        -:  881:
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case smithy:
    #####:  885:      playSmithy(state, handPos);
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case village:
  3000001:  889:      playVillage(state, handPos);
  3000001:  890:      return 0;
        -:  891:		
        -:  892:    case baron:
    #####:  893:      state->numBuys++;//Increase buys by 1!
    #####:  894:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  895:	int p = 0;//Iterator for hand!
    #####:  896:	int card_not_discarded = 1;//Flag for discard set!
    #####:  897:	while(card_not_discarded){
    #####:  898:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  899:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  900:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  901:	    state->discardCount[currentPlayer]++;
    #####:  902:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  903:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  904:	    }
    #####:  905:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  906:	    state->handCount[currentPlayer]--;
    #####:  907:	    card_not_discarded = 0;//Exit the loop
        -:  908:	  }
    #####:  909:	  else if (p > state->handCount[currentPlayer]){
        -:  910:	    if(DEBUG) {
        -:  911:	      printf("No estate cards in your hand, invalid choice\n");
        -:  912:	      printf("Must gain an estate if there are any\n");
        -:  913:	    }
    #####:  914:	    if (supplyCount(estate, state) > 0){
    #####:  915:	      gainCard(estate, state, 0, currentPlayer);
    #####:  916:	      state->supplyCount[estate]--;//Decrement estates
    #####:  917:	      if (supplyCount(estate, state) == 0){
    #####:  918:		isGameOver(state);
        -:  919:	      }
        -:  920:	    }
    #####:  921:	    card_not_discarded = 0;//Exit the loop
        -:  922:	  }
        -:  923:			    
        -:  924:	  else{
    #####:  925:	    p++;//Next card
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:			    
        -:  930:      else{
    #####:  931:	if (supplyCount(estate, state) > 0){
    #####:  932:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  933:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  934:	  if (supplyCount(estate, state) == 0){
    #####:  935:	    isGameOver(state);
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:	    
        -:  940:      
    #####:  941:      return 0;
        -:  942:		
        -:  943:    case great_hall:
        -:  944:      //+1 Card
    #####:  945:      drawCard(currentPlayer, state);
        -:  946:			
        -:  947:      //+1 Actions
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
        -: 1181:      //+2 Coins
    #####: 1182:      state->coins = state->coins + 2;
        -: 1183:			
        -: 1184:      //see if selected pile is in play
    #####: 1185:      if ( state->supplyCount[choice1] == -1 )
        -: 1186:	{
    #####: 1187:	  return -1;
        -: 1188:	}
        -: 1189:			
        -: 1190:      //add embargo token to selected supply pile
    #####: 1191:      state->embargoTokens[choice1]++;
        -: 1192:			
        -: 1193:      //trash card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case outpost:
        -: 1198:      //set outpost flag
    #####: 1199:      state->outpostPlayed++;
        -: 1200:			
        -: 1201:      //discard card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case salvager:
        -: 1206:      //+1 buy
    #####: 1207:      state->numBuys++;
        -: 1208:			
    #####: 1209:      if (choice1)
        -: 1210:	{
        -: 1211:	  //gain coins equal to trashed card
    #####: 1212:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1213:	  //trash card
    #####: 1214:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1215:	}
        -: 1216:			
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case sea_hag:
    #####: 1222:      for (i = 0; i < state->numPlayers; i++){
    #####: 1223:	if (i != currentPlayer){
    #####: 1224:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1225:	  state->discardCount[i]++;
    #####: 1226:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1227:	}
        -: 1228:      }
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
  3000001: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
  3000001: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
  3000001: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
  3000001: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
  3000001: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
  3000001: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
  1917715: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
  1082286: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
  1082286: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
  1082286: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
  1082286: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
  3000001: 1300:  return 0;
        -: 1301:}
        -: 1302:
    #####: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
    #####: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
    #####: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
    #####: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
    #####: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
    #####: 1337:  return 0;
        -: 1338:}
        -: 1339:
  3000001: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
  3000001: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
 18000006: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
 15000005: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
 11294857: 1352:	  state->coins += 1;
        -: 1353:	}
  3705148: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
    #####: 1356:	  state->coins += 2;
        -: 1357:	}
  3705148: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
    #####: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
  3000001: 1365:  state->coins += bonus;
        -: 1366:
  3000001: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
